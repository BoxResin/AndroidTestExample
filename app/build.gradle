apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco'

android {
    compileSdkVersion 28

    defaultConfig {
        applicationId 'boxresin.test.androidtestexample'
        minSdkVersion 14
        targetSdkVersion 28
        versionCode 1
        versionName '1.0.0'
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    testOptions.unitTests.includeAndroidResources = true
}

// 의존성
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // 코틀린
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.0-RC2'

    // AndroidX
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    // 테스트
    testImplementation 'junit:junit:4.12'
    testImplementation 'androidx.test:runner:1.2.0'
    testImplementation 'androidx.test.ext:junit:1.1.1'
    testImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    testImplementation 'org.robolectric:robolectric:4.3'
}

jacoco {
    reportsDir = file("${buildDir}/reports")
}

// 안드로이드 테스트 커버리지 측정을 가능하게 한다.
tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

task coverageReport(type: JacocoReport, dependsOn: 'testDebugUnitTest') {
    group = 'Reporting'
    description = 'Generate Jacoco coverage reports'

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilters = [
            '**/R.class',
            '**/R$*.class',
            '**/BuildConfig.*',
            '**/Manifest*.*',
            'com/android/**/*.class'
    ]
    def javaDebugTree = fileTree(dir: "${buildDir}/intermediates/javac/debug", excludes: fileFilters)
    def kotlinDebugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug", excludes: fileFilters)

    sourceDirectories = files(['src/main/java'])
    classDirectories = files([javaDebugTree, kotlinDebugTree])
    executionData = files("${buildDir}/jacoco/testDebugUnitTest.exec")
}
